Angular CLI -12.5 Route Guards
-----------
ng g g products/products-detail
--angular generate guard path/name

--Shows 3 choices - press space to select one or more:
>(*) CanActivate
 ( ) CanActivateChild
 ( ) CanDeactivate
 ( ) CanLoad

--& creates the guards:
CREATE src/app/products/product-detail.guard.spec.ts (377 bytes) --unit test file for the guard
CREATE src/app/products/product-detail.guard.ts (465 bytes)

--create a feature module
$ ng g m products/product 
--angular generate module folder/nameOfNewModule
--but if the folder exists create it with --flat ie.no folder creation needed
$ ng g m products/product --flat
--and we want to  import this new module into app module to pull in its functionality
--so we add -m => import module in module and the module name
$ ng g m products/product --flat -m app
--result
CREATE src/app/products/product.module.ts (193 bytes)
UPDATE src/app/app.module.ts (1420 bytes)
 --------------------------How to start the lesson's project-----------------------
1) check that we have node                    $ node -v
2) Input the dependencies from package.json   $ npm install  
3) $ npm install bootstrap@4.1.1 font-awesome@4.7.0 
  bootstrap dependencies of jquery@1.9.1 & popper.js@^1.14.3 refer to the interactive features - if we want only styling we dont need them


  //Initializing SQL tools service for the mssql extension.
Note: mssql commands will be available after installing the service.

Platform: win32, x86_64 (Windows)

Installing SQL tools service to c:\Users\Ali\.vscode\extensions\ms-mssql.mssql-1.9.0\sqltoolsservice\1.9.0\Windows.
Downloading https://download.microsoft.com/download/4/1/c/41ceb814-b8d3-4157-9dd0-b4aa0e11484d/microsoft.sqltools.servicelayer-win-x64-netcoreapp2.2.zip
(45622 KB) .................... Done!
Installing ...
Done! 509 files unpacked.
????////

//CompileOnSave: -false -> true, in tsconfig.json file did not work
Found this thread:
https://github.com/microsoft/vscode/issues/13953 where this is interesting:
''Something I didn't realize was that it's possible to do this with the Tasks infrastructure that VSCode has. All you have to do is put this into your tasks.json:

{
  "version": "0.1.0",
  "command": "tsc",
  "isShellCommand": true,
  "args": ["-w", "-p", "."],
  "showOutput": "silent",
  "isBackground": true,
  "problemMatcher": "$tsc-watch"
}
Then just run it and you'll get all of the errors across your entire project in the problems view.
I'm a bit perplexed why this isn't displayed more prominently. It's super useful and cool.
'' johnfn's reply
//next reply:
@johnfn Great solution, thanks a lot. I would even add the "--noEmit" argument if the sole purpose of the task is to show the errors

{
  "version": "0.1.0",
  "command": "tsc",
  "isShellCommand": true,
  "args": ["-w", "-p", ".", "--noEmit"],
  "showOutput": "silent",
  "isBackground": true,
  "problemMatcher": "$tsc-watch"
}
// - while most links posted for solution of tds -w : made typescript to watch for changes in files ie:on save
// another option is to dig in the new Ahead Of Time Compilation mode of Angular
https://angular.io/guide/typescript-configuration
--remember that the tsconfig.json file extends in the e2e/tsconfig.json file as well (more setttings there)
  /* <pm-products></pm-products>*/

  